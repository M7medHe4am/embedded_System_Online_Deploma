
LCD_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b5e  00000bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  00000bfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001392  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098c  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000345c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078d  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000809  00000000  00000000  00003e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000463e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 02 	call	0x484	; 0x484 <main>
  8a:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <calc_store_firstnumber>:


void calc_store_firstnumber(s_num_t* var, uint8_t firstNumber,uint8_t i)
{
		
	var->firstNumber[i] = firstNumber;
  92:	84 0f       	add	r24, r20
  94:	91 1d       	adc	r25, r1
  96:	fc 01       	movw	r30, r24
  98:	60 83       	st	Z, r22
  9a:	08 95       	ret

0000009c <calc_store_secondnumber>:
}

void calc_store_secondnumber(s_num_t* var,uint8_t secondNumber ,uint8_t j)
{
	var->secondNumber[j] = secondNumber;
  9c:	84 0f       	add	r24, r20
  9e:	91 1d       	adc	r25, r1
  a0:	fc 01       	movw	r30, r24
  a2:	60 a7       	std	Z+40, r22	; 0x28
  a4:	08 95       	ret

000000a6 <calc_store_operator>:


void calc_store_operator(s_num_t* var , uint8_t operator)
{
	
	var->op = operator ;	
  a6:	80 5b       	subi	r24, 0xB0	; 176
  a8:	9f 4f       	sbci	r25, 0xFF	; 255
  aa:	fc 01       	movw	r30, r24
  ac:	60 83       	st	Z, r22
  ae:	08 95       	ret

000000b0 <calc_result>:
}



void calc_result(s_num_t *var)
{
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	int  num1 =0  , num2 = 0;
	//const char 
	num1 = atoi(var->firstNumber);
  ba:	0e 94 9d 02 	call	0x53a	; 0x53a <atoi>
  be:	8c 01       	movw	r16, r24
	num2 = atoi(var->secondNumber);
  c0:	ce 01       	movw	r24, r28
  c2:	88 96       	adiw	r24, 0x28	; 40
  c4:	0e 94 9d 02 	call	0x53a	; 0x53a <atoi>
  c8:	bc 01       	movw	r22, r24
	
	switch(var->op)
  ca:	fe 01       	movw	r30, r28
  cc:	e0 5b       	subi	r30, 0xB0	; 176
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	90 81       	ld	r25, Z
  d2:	9b 32       	cpi	r25, 0x2B	; 43
  d4:	c1 f0       	breq	.+48     	; 0x106 <calc_result+0x56>
  d6:	9f 32       	cpi	r25, 0x2F	; 47
  d8:	69 f0       	breq	.+26     	; 0xf4 <calc_result+0x44>
  da:	9a 32       	cpi	r25, 0x2A	; 42
  dc:	e1 f4       	brne	.+56     	; 0x116 <calc_result+0x66>
	{
		case '*':
			var->result = num1 *  num2;
  de:	06 9f       	mul	r16, r22
  e0:	c0 01       	movw	r24, r0
  e2:	07 9f       	mul	r16, r23
  e4:	90 0d       	add	r25, r0
  e6:	16 9f       	mul	r17, r22
  e8:	90 0d       	add	r25, r0
  ea:	11 24       	eor	r1, r1
  ec:	31 96       	adiw	r30, 0x01	; 1
  ee:	91 83       	std	Z+1, r25	; 0x01
  f0:	80 83       	st	Z, r24
			break;
  f2:	18 c0       	rjmp	.+48     	; 0x124 <calc_result+0x74>
		case '/':
			var->result = num1 /  num2;
  f4:	c8 01       	movw	r24, r16
  f6:	0e 94 75 02 	call	0x4ea	; 0x4ea <__divmodhi4>
  fa:	fe 01       	movw	r30, r28
  fc:	ef 5a       	subi	r30, 0xAF	; 175
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	71 83       	std	Z+1, r23	; 0x01
 102:	60 83       	st	Z, r22
			break;
 104:	0f c0       	rjmp	.+30     	; 0x124 <calc_result+0x74>
		case '+' :
			var->result = num1 +  num2;
 106:	60 0f       	add	r22, r16
 108:	71 1f       	adc	r23, r17
 10a:	fe 01       	movw	r30, r28
 10c:	ef 5a       	subi	r30, 0xAF	; 175
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	71 83       	std	Z+1, r23	; 0x01
 112:	60 83       	st	Z, r22
			break;
 114:	07 c0       	rjmp	.+14     	; 0x124 <calc_result+0x74>
		default: 
			var->result = num1 -  num2;
 116:	06 1b       	sub	r16, r22
 118:	17 0b       	sbc	r17, r23
 11a:	fe 01       	movw	r30, r28
 11c:	ef 5a       	subi	r30, 0xAF	; 175
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	11 83       	std	Z+1, r17	; 0x01
 122:	00 83       	st	Z, r16
			break ;
	}
	sprintf(var->string,"%d",var->result);
 124:	ce 01       	movw	r24, r28
 126:	8d 5a       	subi	r24, 0xAD	; 173
 128:	9f 4f       	sbci	r25, 0xFF	; 255
 12a:	cf 5a       	subi	r28, 0xAF	; 175
 12c:	df 4f       	sbci	r29, 0xFF	; 255
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	2f 93       	push	r18
 132:	28 81       	ld	r18, Y
 134:	2f 93       	push	r18
 136:	28 e6       	ldi	r18, 0x68	; 104
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	3f 93       	push	r19
 13c:	2f 93       	push	r18
 13e:	9f 93       	push	r25
 140:	8f 93       	push	r24
 142:	0e 94 c3 02 	call	0x586	; 0x586 <sprintf>
	
}
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <calc_reset_parameters>:
	return 0 ;
}


void calc_reset_parameters(s_parameter_t* parameter)
{
 15c:	fc 01       	movw	r30, r24
	parameter->counter = 0;
 15e:	12 82       	std	Z+2, r1	; 0x02
	parameter->i =0;
 160:	10 82       	st	Z, r1
	parameter->j =0;
 162:	11 82       	std	Z+1, r1	; 0x01
 164:	08 95       	ret

00000166 <calc_key_pressed_check>:




uint8_t calc_key_pressed_check(s_num_t *var , uint8_t key_pressed,s_parameter_t* parameter)
{
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	7c 01       	movw	r14, r24
 172:	8a 01       	movw	r16, r20

	if ((key_pressed == '=') || (parameter->counter == 2))
 174:	6d 33       	cpi	r22, 0x3D	; 61
 176:	21 f0       	breq	.+8      	; 0x180 <calc_key_pressed_check+0x1a>
 178:	fa 01       	movw	r30, r20
 17a:	c2 81       	ldd	r28, Z+2	; 0x02
 17c:	c2 30       	cpi	r28, 0x02	; 2
 17e:	41 f4       	brne	.+16     	; 0x190 <calc_key_pressed_check+0x2a>
	{
		calc_result(var);
 180:	c7 01       	movw	r24, r14
 182:	0e 94 58 00 	call	0xb0	; 0xb0 <calc_result>
		calc_reset_parameters(parameter);
 186:	c8 01       	movw	r24, r16
 188:	0e 94 ae 00 	call	0x15c	; 0x15c <calc_reset_parameters>
		return 1 ;
 18c:	c1 e0       	ldi	r28, 0x01	; 1
 18e:	2d c0       	rjmp	.+90     	; 0x1ea <calc_key_pressed_check+0x84>
	}
	else if (  (key_pressed == '*') || (key_pressed == '/')|| (key_pressed == '+')|| (key_pressed == '-'))
 190:	6a 32       	cpi	r22, 0x2A	; 42
 192:	31 f0       	breq	.+12     	; 0x1a0 <calc_key_pressed_check+0x3a>
 194:	6f 32       	cpi	r22, 0x2F	; 47
 196:	21 f0       	breq	.+8      	; 0x1a0 <calc_key_pressed_check+0x3a>
 198:	6b 32       	cpi	r22, 0x2B	; 43
 19a:	11 f0       	breq	.+4      	; 0x1a0 <calc_key_pressed_check+0x3a>
 19c:	6d 32       	cpi	r22, 0x2D	; 45
 19e:	49 f4       	brne	.+18     	; 0x1b2 <calc_key_pressed_check+0x4c>
	{
		calc_store_operator(var,key_pressed);
 1a0:	c7 01       	movw	r24, r14
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <calc_store_operator>
		(parameter->counter)++;	
 1a6:	f8 01       	movw	r30, r16
 1a8:	82 81       	ldd	r24, Z+2	; 0x02
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	82 83       	std	Z+2, r24	; 0x02
			calc_store_secondnumber(var,key_pressed,parameter->j);
			(parameter->j)++;
			calc_store_secondnumber(var , '\0' , parameter->j);
		}
	}
	return 0 ;
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
		return 1 ;
	}
	else if (  (key_pressed == '*') || (key_pressed == '/')|| (key_pressed == '+')|| (key_pressed == '-'))
	{
		calc_store_operator(var,key_pressed);
		(parameter->counter)++;	
 1b0:	1c c0       	rjmp	.+56     	; 0x1ea <calc_key_pressed_check+0x84>
	}
	else
	{
		if(parameter->counter == 0)
 1b2:	c1 11       	cpse	r28, r1
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <calc_key_pressed_check+0x6a>
		{
			calc_store_firstnumber(var , key_pressed , parameter->i);
 1b6:	fa 01       	movw	r30, r20
 1b8:	40 81       	ld	r20, Z
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <calc_store_firstnumber>
			(parameter->i)++;
 1be:	f8 01       	movw	r30, r16
 1c0:	40 81       	ld	r20, Z
 1c2:	4f 5f       	subi	r20, 0xFF	; 255
 1c4:	40 83       	st	Z, r20
			calc_store_firstnumber(var , '\0' , parameter->i);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	c7 01       	movw	r24, r14
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <calc_store_firstnumber>
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <calc_key_pressed_check+0x84>
		}
		else
		{
			calc_store_secondnumber(var,key_pressed,parameter->j);
 1d0:	fa 01       	movw	r30, r20
 1d2:	41 81       	ldd	r20, Z+1	; 0x01
 1d4:	0e 94 4e 00 	call	0x9c	; 0x9c <calc_store_secondnumber>
			(parameter->j)++;
 1d8:	f8 01       	movw	r30, r16
 1da:	41 81       	ldd	r20, Z+1	; 0x01
 1dc:	4f 5f       	subi	r20, 0xFF	; 255
 1de:	41 83       	std	Z+1, r20	; 0x01
			calc_store_secondnumber(var , '\0' , parameter->j);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	c7 01       	movw	r24, r14
 1e4:	0e 94 4e 00 	call	0x9c	; 0x9c <calc_store_secondnumber>
		}
	}
	return 0 ;
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
}
 1ea:	8c 2f       	mov	r24, r28
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <KEYPAD_init>:
//========================================FUNCTIONS========================================

void KEYPAD_init(void)
{
	//writing low on all pins to prevent any sparks 
	KEYPAD_DATA_PORT = 0x00;
 1f8:	12 ba       	out	0x12, r1	; 18
	
	//configuring upper 4 pins as input with PU 
	//>>input configs 
	KEYPAD_DATA_DIR &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
 1fa:	81 b3       	in	r24, 0x11	; 17
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	81 bb       	out	0x11, r24	; 17
	//configuring lower 4 pins as output
	KEYPAD_DATA_DIR |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
 200:	81 b3       	in	r24, 0x11	; 17
 202:	80 6f       	ori	r24, 0xF0	; 240
 204:	81 bb       	out	0x11, r24	; 17
	
	//>>pullUp resistor config for the upper Pins >> writing high on the PORT PINS 
	//writing high on the lower pins 
	KEYPAD_DATA_PORT = 0xFF ;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	82 bb       	out	0x12, r24	; 18
 20a:	08 95       	ret

0000020c <KEYPAD_read_button>:


uint8_t KEYPAD_read_button()
{
	uint8_t i,j ;
	for (i=0 ; i <4 ; i++)
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	65 c0       	rjmp	.+202    	; 0x2da <KEYPAD_read_button+0xce>
	{
		//writing high on the lower pins
		KEYPAD_DATA_PORT |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
 210:	82 b3       	in	r24, 0x12	; 18
 212:	80 6f       	ori	r24, 0xF0	; 240
 214:	82 bb       	out	0x12, r24	; 18
		
		//writing low to a one keypad column atime 
		KEYPAD_DATA_PORT &= ~((1<<LOWER[i]));
 216:	22 b3       	in	r18, 0x12	; 18
 218:	ea 2f       	mov	r30, r26
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	00 80       	ld	r0, Z
 226:	02 c0       	rjmp	.+4      	; 0x22c <KEYPAD_read_button+0x20>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <KEYPAD_read_button+0x1c>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	82 bb       	out	0x12, r24	; 18
		for (j=0 ; j<4 ; j++)
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	4c c0       	rjmp	.+152    	; 0x2d2 <KEYPAD_read_button+0xc6>
		{
			if(!(((1<<UPPER[j])&KEYPAD_READ_PIN)>>UPPER[j]))
 23a:	e2 2f       	mov	r30, r18
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	ec 59       	subi	r30, 0x9C	; 156
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	30 81       	ld	r19, Z
 244:	63 2f       	mov	r22, r19
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	03 2e       	mov	r0, r19
 24c:	02 c0       	rjmp	.+4      	; 0x252 <KEYPAD_read_button+0x46>
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <KEYPAD_read_button+0x42>
 256:	80 b3       	in	r24, 0x10	; 16
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	84 23       	and	r24, r20
 25c:	95 23       	and	r25, r21
 25e:	02 c0       	rjmp	.+4      	; 0x264 <KEYPAD_read_button+0x58>
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	3a 95       	dec	r19
 266:	e2 f7       	brpl	.-8      	; 0x260 <KEYPAD_read_button+0x54>
 268:	89 2b       	or	r24, r25
 26a:	91 f5       	brne	.+100    	; 0x2d0 <KEYPAD_read_button+0xc4>
			{
				//if the button still pressed >> loop until it is released
				while(!(((1<<UPPER[j])&KEYPAD_READ_PIN)>>UPPER[j]));
 26c:	80 b3       	in	r24, 0x10	; 16
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	84 23       	and	r24, r20
 272:	95 23       	and	r25, r21
 274:	06 2e       	mov	r0, r22
 276:	02 c0       	rjmp	.+4      	; 0x27c <KEYPAD_read_button+0x70>
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <KEYPAD_read_button+0x6c>
 280:	89 2b       	or	r24, r25
 282:	a1 f3       	breq	.-24     	; 0x26c <KEYPAD_read_button+0x60>
				switch(i)
 284:	a1 30       	cpi	r26, 0x01	; 1
 286:	61 f0       	breq	.+24     	; 0x2a0 <KEYPAD_read_button+0x94>
 288:	18 f0       	brcs	.+6      	; 0x290 <KEYPAD_read_button+0x84>
 28a:	a2 30       	cpi	r26, 0x02	; 2
 28c:	89 f0       	breq	.+34     	; 0x2b0 <KEYPAD_read_button+0xa4>
 28e:	18 c0       	rjmp	.+48     	; 0x2c0 <KEYPAD_read_button+0xb4>
				{
					case 0 :
					{
						if(j==0)			return '7'	;
 290:	22 23       	and	r18, r18
 292:	41 f1       	breq	.+80     	; 0x2e4 <KEYPAD_read_button+0xd8>
						else if (j==1)		return '4'	;
 294:	21 30       	cpi	r18, 0x01	; 1
 296:	41 f1       	breq	.+80     	; 0x2e8 <KEYPAD_read_button+0xdc>
						else if (j==2)		return '1'	;
 298:	22 30       	cpi	r18, 0x02	; 2
 29a:	41 f5       	brne	.+80     	; 0x2ec <KEYPAD_read_button+0xe0>
 29c:	81 e3       	ldi	r24, 0x31	; 49
 29e:	08 95       	ret
						else				return 'C'	;
						break;
					}	
					case 1 :
					{
						if(j==0)			return '8'	;
 2a0:	22 23       	and	r18, r18
 2a2:	31 f1       	breq	.+76     	; 0x2f0 <KEYPAD_read_button+0xe4>
						else if (j==1)		return '5'	;
 2a4:	21 30       	cpi	r18, 0x01	; 1
 2a6:	31 f1       	breq	.+76     	; 0x2f4 <KEYPAD_read_button+0xe8>
						else if (j==2)		return '2'	;
 2a8:	22 30       	cpi	r18, 0x02	; 2
 2aa:	31 f5       	brne	.+76     	; 0x2f8 <KEYPAD_read_button+0xec>
 2ac:	82 e3       	ldi	r24, 0x32	; 50
 2ae:	08 95       	ret
						else				return '0'	;
						break;
					}
					case 2 :
					{
						if(j==0)			return '9'	;
 2b0:	22 23       	and	r18, r18
 2b2:	21 f1       	breq	.+72     	; 0x2fc <KEYPAD_read_button+0xf0>
						else if (j==1)		return '6'	;
 2b4:	21 30       	cpi	r18, 0x01	; 1
 2b6:	21 f1       	breq	.+72     	; 0x300 <KEYPAD_read_button+0xf4>
						else if (j==2)		return '3'	;
 2b8:	22 30       	cpi	r18, 0x02	; 2
 2ba:	21 f5       	brne	.+72     	; 0x304 <KEYPAD_read_button+0xf8>
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	08 95       	ret
						else				return '='	;
						break;
					}
					default :
					{
						if(j==0)			return '/'	;
 2c0:	22 23       	and	r18, r18
 2c2:	11 f1       	breq	.+68     	; 0x308 <KEYPAD_read_button+0xfc>
						else if (j==1)		return '*'	;
 2c4:	21 30       	cpi	r18, 0x01	; 1
 2c6:	11 f1       	breq	.+68     	; 0x30c <KEYPAD_read_button+0x100>
						else if (j==2)		return '-'	;
 2c8:	22 30       	cpi	r18, 0x02	; 2
 2ca:	11 f5       	brne	.+68     	; 0x310 <KEYPAD_read_button+0x104>
 2cc:	8d e2       	ldi	r24, 0x2D	; 45
 2ce:	08 95       	ret
		//writing high on the lower pins
		KEYPAD_DATA_PORT |=  ((1<<C0) | (1<<C1) | (1<<C2) | (1<<C3));
		
		//writing low to a one keypad column atime 
		KEYPAD_DATA_PORT &= ~((1<<LOWER[i]));
		for (j=0 ; j<4 ; j++)
 2d0:	2f 5f       	subi	r18, 0xFF	; 255
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <KEYPAD_read_button+0xcc>
 2d6:	b1 cf       	rjmp	.-158    	; 0x23a <KEYPAD_read_button+0x2e>


uint8_t KEYPAD_read_button()
{
	uint8_t i,j ;
	for (i=0 ; i <4 ; i++)
 2d8:	af 5f       	subi	r26, 0xFF	; 255
 2da:	a4 30       	cpi	r26, 0x04	; 4
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <KEYPAD_read_button+0xd4>
 2de:	98 cf       	rjmp	.-208    	; 0x210 <KEYPAD_read_button+0x4>
			}
		}
	
	}
	
	return 'A';
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	08 95       	ret
				while(!(((1<<UPPER[j])&KEYPAD_READ_PIN)>>UPPER[j]));
				switch(i)
				{
					case 0 :
					{
						if(j==0)			return '7'	;
 2e4:	87 e3       	ldi	r24, 0x37	; 55
 2e6:	08 95       	ret
						else if (j==1)		return '4'	;
 2e8:	84 e3       	ldi	r24, 0x34	; 52
 2ea:	08 95       	ret
						else if (j==2)		return '1'	;
						else				return 'C'	;
 2ec:	83 e4       	ldi	r24, 0x43	; 67
 2ee:	08 95       	ret
						break;
					}	
					case 1 :
					{
						if(j==0)			return '8'	;
 2f0:	88 e3       	ldi	r24, 0x38	; 56
 2f2:	08 95       	ret
						else if (j==1)		return '5'	;
 2f4:	85 e3       	ldi	r24, 0x35	; 53
 2f6:	08 95       	ret
						else if (j==2)		return '2'	;
						else				return '0'	;
 2f8:	80 e3       	ldi	r24, 0x30	; 48
 2fa:	08 95       	ret
						break;
					}
					case 2 :
					{
						if(j==0)			return '9'	;
 2fc:	89 e3       	ldi	r24, 0x39	; 57
 2fe:	08 95       	ret
						else if (j==1)		return '6'	;
 300:	86 e3       	ldi	r24, 0x36	; 54
 302:	08 95       	ret
						else if (j==2)		return '3'	;
						else				return '='	;
 304:	8d e3       	ldi	r24, 0x3D	; 61
 306:	08 95       	ret
						break;
					}
					default :
					{
						if(j==0)			return '/'	;
 308:	8f e2       	ldi	r24, 0x2F	; 47
 30a:	08 95       	ret
						else if (j==1)		return '*'	;
 30c:	8a e2       	ldi	r24, 0x2A	; 42
 30e:	08 95       	ret
						else if (j==2)		return '-'	;
						else				return '+'	;
 310:	8b e2       	ldi	r24, 0x2B	; 43
		}
	
	}
	
	return 'A';
}
 312:	08 95       	ret

00000314 <LCD_kick>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 314:	88 b3       	in	r24, 0x18	; 24
 316:	88 60       	ori	r24, 0x08	; 8
 318:	88 bb       	out	0x18, r24	; 24
 31a:	8f ec       	ldi	r24, 0xCF	; 207
 31c:	97 e0       	ldi	r25, 0x07	; 7
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <LCD_kick+0xa>
 322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_kick+0x10>
 324:	00 00       	nop
 326:	88 b3       	in	r24, 0x18	; 24
 328:	87 7f       	andi	r24, 0xF7	; 247
 32a:	88 bb       	out	0x18, r24	; 24
 32c:	08 95       	ret

0000032e <LCD_send_command>:
 32e:	98 b3       	in	r25, 0x18	; 24
 330:	9d 7f       	andi	r25, 0xFD	; 253
 332:	98 bb       	out	0x18, r25	; 24
 334:	8b bb       	out	0x1b, r24	; 27
 336:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_kick>
 33a:	08 95       	ret

0000033c <LCD_clear_screen>:
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
 342:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 346:	08 95       	ret

00000348 <LCD_return_home>:
 348:	82 e0       	ldi	r24, 0x02	; 2
 34a:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
 34e:	8f e9       	ldi	r24, 0x9F	; 159
 350:	9f e0       	ldi	r25, 0x0F	; 15
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_return_home+0xa>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_return_home+0x10>
 358:	00 00       	nop
 35a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 35e:	08 95       	ret

00000360 <LCD_entry_mode_set>:
 360:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
 364:	8f ec       	ldi	r24, 0xCF	; 207
 366:	97 e0       	ldi	r25, 0x07	; 7
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <LCD_entry_mode_set+0x8>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <LCD_entry_mode_set+0xe>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <LCD_disp_ctrl>:
 372:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
 376:	8f ec       	ldi	r24, 0xCF	; 207
 378:	97 e0       	ldi	r25, 0x07	; 7
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_disp_ctrl+0x8>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_disp_ctrl+0xe>
 380:	00 00       	nop
 382:	08 95       	ret

00000384 <LCD_function_set>:
 384:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
 388:	8f ec       	ldi	r24, 0xCF	; 207
 38a:	97 e0       	ldi	r25, 0x07	; 7
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_function_set+0x8>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_function_set+0xe>
 392:	00 00       	nop
 394:	08 95       	ret

00000396 <LCD_init>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	ec 01       	movw	r28, r24
 39c:	88 b3       	in	r24, 0x18	; 24
 39e:	81 7f       	andi	r24, 0xF1	; 241
 3a0:	88 bb       	out	0x18, r24	; 24
 3a2:	87 b3       	in	r24, 0x17	; 23
 3a4:	8e 60       	ori	r24, 0x0E	; 14
 3a6:	87 bb       	out	0x17, r24	; 23
 3a8:	1b ba       	out	0x1b, r1	; 27
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	8a bb       	out	0x1a, r24	; 26
 3ae:	8f e3       	ldi	r24, 0x3F	; 63
 3b0:	9c e9       	ldi	r25, 0x9C	; 156
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_init+0x1c>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_init+0x22>
 3b8:	00 00       	nop
 3ba:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_return_home>
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	0e 94 c2 01 	call	0x384	; 0x384 <LCD_function_set>
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	0e 94 b9 01 	call	0x372	; 0x372 <LCD_disp_ctrl>
 3ca:	88 81       	ld	r24, Y
 3cc:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_entry_mode_set>
 3d0:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_clear_screen>
 3d4:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_return_home>
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_set_position>:
	//setting EN pin to low
	LCD_CTRL_PORT &= ~(1<<LCD_EN_PIN);
}

uint8_t LCD_set_position(uint8_t row , uint8_t col)
{
 3de:	cf 93       	push	r28
	uint8_t address;
	if(!((row < 2) && (col<16)))
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	80 f4       	brcc	.+32     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e4:	60 31       	cpi	r22, 0x10	; 16
 3e6:	80 f4       	brcc	.+32     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		return 0 ;
	}
	
	address = (row == 0)? (0x00):(0x40) ;
 3e8:	81 11       	cpse	r24, r1
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <LCD_set_position+0x12>
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCD_set_position+0x14>
 3f0:	c0 e4       	ldi	r28, 0x40	; 64
	LCD_send_command((1<<7) | (address+col));    
 3f2:	c6 0f       	add	r28, r22
 3f4:	8c 2f       	mov	r24, r28
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	0e 94 97 01 	call	0x32e	; 0x32e <LCD_send_command>
	LCD_address = address+col;
 3fc:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <__data_end>
	return 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
uint8_t LCD_set_position(uint8_t row , uint8_t col)
{
	uint8_t address;
	if(!((row < 2) && (col<16)))
	{
		return 0 ;
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	01 c0       	rjmp	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	80 e0       	ldi	r24, 0x00	; 0
	address = (row == 0)? (0x00):(0x40) ;
	LCD_send_command((1<<7) | (address+col));    
	LCD_address = address+col;
	return 1;
	
}
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <LCD_update_position>:

static void LCD_update_position(void)
{
	if(LCD_address == 15 )
 40e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 412:	8f 30       	cpi	r24, 0x0F	; 15
 414:	29 f4       	brne	.+10     	; 0x420 <LCD_update_position+0x12>
	{
		LCD_set_position(1,0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_set_position>
 41e:	08 95       	ret
	}
	else 
	{
		LCD_address++;
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 426:	08 95       	ret

00000428 <LCD_send_char>:

void LCD_send_char(uint8_t c)
{
	//RW is set to low by default 
	//setting RS to high >> data mode 
	LCD_CTRL_PORT |= (1<<LCD_RS_PIN);
 428:	98 b3       	in	r25, 0x18	; 24
 42a:	92 60       	ori	r25, 0x02	; 2
 42c:	98 bb       	out	0x18, r25	; 24
	LCD_DATA_PORT = c;
 42e:	8b bb       	out	0x1b, r24	; 27
	LCD_kick();
 430:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_kick>
	LCD_update_position();
 434:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_update_position>
 438:	08 95       	ret

0000043a <LCD_send_string>:
	 
}


void LCD_send_string(uint8_t *string)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
	while (*string)
 440:	03 c0       	rjmp	.+6      	; 0x448 <LCD_send_string+0xe>
	{
		LCD_send_char(*string++);
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	0e 94 14 02 	call	0x428	; 0x428 <LCD_send_char>
}


void LCD_send_string(uint8_t *string)
{
	while (*string)
 448:	88 81       	ld	r24, Y
 44a:	81 11       	cpse	r24, r1
 44c:	fa cf       	rjmp	.-12     	; 0x442 <LCD_send_string+0x8>
	{
		LCD_send_char(*string++);
	}
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <app_init>:

#include "LCD_driver/lcd.h"
#include "keypad_driver/keypad.h"
#include "calculator/calc.h"
void app_init()
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 d0       	rcall	.+0      	; 0x45a <app_init+0x6>
 45a:	1f 92       	push	r1
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	s_LCD_Config_t LCD_config;
	LCD_config.e_DispCtrl	= ON_DISP | ON_BLINK | ON_CURSOR ;
 460:	8f e0       	ldi	r24, 0x0F	; 15
 462:	8a 83       	std	Y+2, r24	; 0x02
	LCD_config.e_EntryMode	= NOSHIFT_INCREMENT;
 464:	84 e0       	ldi	r24, 0x04	; 4
 466:	89 83       	std	Y+1, r24	; 0x01
	LCD_config.e_FuncSet	= EIGHT_BIT_MODE_2LINE_10DOTS;
 468:	8c e3       	ldi	r24, 0x3C	; 60
 46a:	8b 83       	std	Y+3, r24	; 0x03
	LCD_init(&LCD_config);
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	0e 94 cb 01 	call	0x396	; 0x396 <LCD_init>
	KEYPAD_init();
 474:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KEYPAD_init>
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <main>:



int main(void)
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	ce 51       	subi	r28, 0x1E	; 30
 48e:	d1 40       	sbci	r29, 0x01	; 1
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
	uint8_t key_pressed ;
	app_init();
 49a:	0e 94 2a 02 	call	0x454	; 0x454 <app_init>
	s_num_t var;
	s_parameter_t parameter;
	calc_reset_parameters(&parameter);
 49e:	ce 01       	movw	r24, r28
 4a0:	84 5e       	subi	r24, 0xE4	; 228
 4a2:	9e 4f       	sbci	r25, 0xFE	; 254
 4a4:	0e 94 ae 00 	call	0x15c	; 0x15c <calc_reset_parameters>
	while (1)
	{
	key_pressed = KEYPAD_read_button();
 4a8:	0e 94 06 01 	call	0x20c	; 0x20c <KEYPAD_read_button>
 4ac:	18 2f       	mov	r17, r24
	switch(key_pressed)
 4ae:	81 34       	cpi	r24, 0x41	; 65
 4b0:	d9 f3       	breq	.-10     	; 0x4a8 <main+0x24>
 4b2:	83 34       	cpi	r24, 0x43	; 67
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <main+0x42>
		{
		case 'A' :
		//DO nothing 
			break;
		case 'C':
			LCD_clear_screen();
 4b6:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_clear_screen>
			calc_reset_parameters(&parameter);
 4ba:	ce 01       	movw	r24, r28
 4bc:	84 5e       	subi	r24, 0xE4	; 228
 4be:	9e 4f       	sbci	r25, 0xFE	; 254
 4c0:	0e 94 ae 00 	call	0x15c	; 0x15c <calc_reset_parameters>
			break;
 4c4:	f1 cf       	rjmp	.-30     	; 0x4a8 <main+0x24>
		default:
		{
			LCD_send_char(key_pressed);
 4c6:	0e 94 14 02 	call	0x428	; 0x428 <LCD_send_char>
			if (calc_key_pressed_check(&var , key_pressed ,&parameter))
 4ca:	ae 01       	movw	r20, r28
 4cc:	44 5e       	subi	r20, 0xE4	; 228
 4ce:	5e 4f       	sbci	r21, 0xFE	; 254
 4d0:	61 2f       	mov	r22, r17
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 b3 00 	call	0x166	; 0x166 <calc_key_pressed_check>
 4da:	88 23       	and	r24, r24
 4dc:	29 f3       	breq	.-54     	; 0x4a8 <main+0x24>
			{
				LCD_send_string(var.string);
 4de:	ce 01       	movw	r24, r28
 4e0:	8c 5a       	subi	r24, 0xAC	; 172
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_send_string>
 4e8:	df cf       	rjmp	.-66     	; 0x4a8 <main+0x24>

000004ea <__divmodhi4>:
 4ea:	97 fb       	bst	r25, 7
 4ec:	07 2e       	mov	r0, r23
 4ee:	16 f4       	brtc	.+4      	; 0x4f4 <__divmodhi4+0xa>
 4f0:	00 94       	com	r0
 4f2:	07 d0       	rcall	.+14     	; 0x502 <__divmodhi4_neg1>
 4f4:	77 fd       	sbrc	r23, 7
 4f6:	09 d0       	rcall	.+18     	; 0x50a <__divmodhi4_neg2>
 4f8:	0e 94 89 02 	call	0x512	; 0x512 <__udivmodhi4>
 4fc:	07 fc       	sbrc	r0, 7
 4fe:	05 d0       	rcall	.+10     	; 0x50a <__divmodhi4_neg2>
 500:	3e f4       	brtc	.+14     	; 0x510 <__divmodhi4_exit>

00000502 <__divmodhi4_neg1>:
 502:	90 95       	com	r25
 504:	81 95       	neg	r24
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	08 95       	ret

0000050a <__divmodhi4_neg2>:
 50a:	70 95       	com	r23
 50c:	61 95       	neg	r22
 50e:	7f 4f       	sbci	r23, 0xFF	; 255

00000510 <__divmodhi4_exit>:
 510:	08 95       	ret

00000512 <__udivmodhi4>:
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	51 e1       	ldi	r21, 0x11	; 17
 518:	07 c0       	rjmp	.+14     	; 0x528 <__udivmodhi4_ep>

0000051a <__udivmodhi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	a6 17       	cp	r26, r22
 520:	b7 07       	cpc	r27, r23
 522:	10 f0       	brcs	.+4      	; 0x528 <__udivmodhi4_ep>
 524:	a6 1b       	sub	r26, r22
 526:	b7 0b       	sbc	r27, r23

00000528 <__udivmodhi4_ep>:
 528:	88 1f       	adc	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	5a 95       	dec	r21
 52e:	a9 f7       	brne	.-22     	; 0x51a <__udivmodhi4_loop>
 530:	80 95       	com	r24
 532:	90 95       	com	r25
 534:	bc 01       	movw	r22, r24
 536:	cd 01       	movw	r24, r26
 538:	08 95       	ret

0000053a <atoi>:
 53a:	fc 01       	movw	r30, r24
 53c:	88 27       	eor	r24, r24
 53e:	99 27       	eor	r25, r25
 540:	e8 94       	clt
 542:	21 91       	ld	r18, Z+
 544:	20 32       	cpi	r18, 0x20	; 32
 546:	e9 f3       	breq	.-6      	; 0x542 <atoi+0x8>
 548:	29 30       	cpi	r18, 0x09	; 9
 54a:	10 f0       	brcs	.+4      	; 0x550 <atoi+0x16>
 54c:	2e 30       	cpi	r18, 0x0E	; 14
 54e:	c8 f3       	brcs	.-14     	; 0x542 <atoi+0x8>
 550:	2b 32       	cpi	r18, 0x2B	; 43
 552:	41 f0       	breq	.+16     	; 0x564 <atoi+0x2a>
 554:	2d 32       	cpi	r18, 0x2D	; 45
 556:	39 f4       	brne	.+14     	; 0x566 <atoi+0x2c>
 558:	68 94       	set
 55a:	04 c0       	rjmp	.+8      	; 0x564 <atoi+0x2a>
 55c:	0e 94 bb 02 	call	0x576	; 0x576 <__mulhi_const_10>
 560:	82 0f       	add	r24, r18
 562:	91 1d       	adc	r25, r1
 564:	21 91       	ld	r18, Z+
 566:	20 53       	subi	r18, 0x30	; 48
 568:	2a 30       	cpi	r18, 0x0A	; 10
 56a:	c0 f3       	brcs	.-16     	; 0x55c <atoi+0x22>
 56c:	1e f4       	brtc	.+6      	; 0x574 <atoi+0x3a>
 56e:	90 95       	com	r25
 570:	81 95       	neg	r24
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <__mulhi_const_10>:
 576:	7a e0       	ldi	r23, 0x0A	; 10
 578:	97 9f       	mul	r25, r23
 57a:	90 2d       	mov	r25, r0
 57c:	87 9f       	mul	r24, r23
 57e:	80 2d       	mov	r24, r0
 580:	91 0d       	add	r25, r1
 582:	11 24       	eor	r1, r1
 584:	08 95       	ret

00000586 <sprintf>:
 586:	ae e0       	ldi	r26, 0x0E	; 14
 588:	b0 e0       	ldi	r27, 0x00	; 0
 58a:	e9 ec       	ldi	r30, 0xC9	; 201
 58c:	f2 e0       	ldi	r31, 0x02	; 2
 58e:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__prologue_saves__+0x1c>
 592:	0d 89       	ldd	r16, Y+21	; 0x15
 594:	1e 89       	ldd	r17, Y+22	; 0x16
 596:	86 e0       	ldi	r24, 0x06	; 6
 598:	8c 83       	std	Y+4, r24	; 0x04
 59a:	1a 83       	std	Y+2, r17	; 0x02
 59c:	09 83       	std	Y+1, r16	; 0x01
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	9f e7       	ldi	r25, 0x7F	; 127
 5a2:	9e 83       	std	Y+6, r25	; 0x06
 5a4:	8d 83       	std	Y+5, r24	; 0x05
 5a6:	ae 01       	movw	r20, r28
 5a8:	47 5e       	subi	r20, 0xE7	; 231
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	6f 89       	ldd	r22, Y+23	; 0x17
 5ae:	78 8d       	ldd	r23, Y+24	; 0x18
 5b0:	ce 01       	movw	r24, r28
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <vfprintf>
 5b8:	ef 81       	ldd	r30, Y+7	; 0x07
 5ba:	f8 85       	ldd	r31, Y+8	; 0x08
 5bc:	e0 0f       	add	r30, r16
 5be:	f1 1f       	adc	r31, r17
 5c0:	10 82       	st	Z, r1
 5c2:	2e 96       	adiw	r28, 0x0e	; 14
 5c4:	e4 e0       	ldi	r30, 0x04	; 4
 5c6:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__epilogue_restores__+0x1c>

000005ca <vfprintf>:
 5ca:	ab e0       	ldi	r26, 0x0B	; 11
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	eb ee       	ldi	r30, 0xEB	; 235
 5d0:	f2 e0       	ldi	r31, 0x02	; 2
 5d2:	0c 94 76 05 	jmp	0xaec	; 0xaec <__prologue_saves__>
 5d6:	6c 01       	movw	r12, r24
 5d8:	7b 01       	movw	r14, r22
 5da:	8a 01       	movw	r16, r20
 5dc:	fc 01       	movw	r30, r24
 5de:	17 82       	std	Z+7, r1	; 0x07
 5e0:	16 82       	std	Z+6, r1	; 0x06
 5e2:	83 81       	ldd	r24, Z+3	; 0x03
 5e4:	81 ff       	sbrs	r24, 1
 5e6:	cc c1       	rjmp	.+920    	; 0x980 <__stack+0x121>
 5e8:	ce 01       	movw	r24, r28
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	3c 01       	movw	r6, r24
 5ee:	f6 01       	movw	r30, r12
 5f0:	93 81       	ldd	r25, Z+3	; 0x03
 5f2:	f7 01       	movw	r30, r14
 5f4:	93 fd       	sbrc	r25, 3
 5f6:	85 91       	lpm	r24, Z+
 5f8:	93 ff       	sbrs	r25, 3
 5fa:	81 91       	ld	r24, Z+
 5fc:	7f 01       	movw	r14, r30
 5fe:	88 23       	and	r24, r24
 600:	09 f4       	brne	.+2      	; 0x604 <vfprintf+0x3a>
 602:	ba c1       	rjmp	.+884    	; 0x978 <__stack+0x119>
 604:	85 32       	cpi	r24, 0x25	; 37
 606:	39 f4       	brne	.+14     	; 0x616 <vfprintf+0x4c>
 608:	93 fd       	sbrc	r25, 3
 60a:	85 91       	lpm	r24, Z+
 60c:	93 ff       	sbrs	r25, 3
 60e:	81 91       	ld	r24, Z+
 610:	7f 01       	movw	r14, r30
 612:	85 32       	cpi	r24, 0x25	; 37
 614:	29 f4       	brne	.+10     	; 0x620 <vfprintf+0x56>
 616:	b6 01       	movw	r22, r12
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 61e:	e7 cf       	rjmp	.-50     	; 0x5ee <vfprintf+0x24>
 620:	91 2c       	mov	r9, r1
 622:	21 2c       	mov	r2, r1
 624:	31 2c       	mov	r3, r1
 626:	ff e1       	ldi	r31, 0x1F	; 31
 628:	f3 15       	cp	r31, r3
 62a:	d8 f0       	brcs	.+54     	; 0x662 <vfprintf+0x98>
 62c:	8b 32       	cpi	r24, 0x2B	; 43
 62e:	79 f0       	breq	.+30     	; 0x64e <vfprintf+0x84>
 630:	38 f4       	brcc	.+14     	; 0x640 <vfprintf+0x76>
 632:	80 32       	cpi	r24, 0x20	; 32
 634:	79 f0       	breq	.+30     	; 0x654 <vfprintf+0x8a>
 636:	83 32       	cpi	r24, 0x23	; 35
 638:	a1 f4       	brne	.+40     	; 0x662 <vfprintf+0x98>
 63a:	23 2d       	mov	r18, r3
 63c:	20 61       	ori	r18, 0x10	; 16
 63e:	1d c0       	rjmp	.+58     	; 0x67a <vfprintf+0xb0>
 640:	8d 32       	cpi	r24, 0x2D	; 45
 642:	61 f0       	breq	.+24     	; 0x65c <vfprintf+0x92>
 644:	80 33       	cpi	r24, 0x30	; 48
 646:	69 f4       	brne	.+26     	; 0x662 <vfprintf+0x98>
 648:	23 2d       	mov	r18, r3
 64a:	21 60       	ori	r18, 0x01	; 1
 64c:	16 c0       	rjmp	.+44     	; 0x67a <vfprintf+0xb0>
 64e:	83 2d       	mov	r24, r3
 650:	82 60       	ori	r24, 0x02	; 2
 652:	38 2e       	mov	r3, r24
 654:	e3 2d       	mov	r30, r3
 656:	e4 60       	ori	r30, 0x04	; 4
 658:	3e 2e       	mov	r3, r30
 65a:	2a c0       	rjmp	.+84     	; 0x6b0 <vfprintf+0xe6>
 65c:	f3 2d       	mov	r31, r3
 65e:	f8 60       	ori	r31, 0x08	; 8
 660:	1d c0       	rjmp	.+58     	; 0x69c <vfprintf+0xd2>
 662:	37 fc       	sbrc	r3, 7
 664:	2d c0       	rjmp	.+90     	; 0x6c0 <vfprintf+0xf6>
 666:	20 ed       	ldi	r18, 0xD0	; 208
 668:	28 0f       	add	r18, r24
 66a:	2a 30       	cpi	r18, 0x0A	; 10
 66c:	40 f0       	brcs	.+16     	; 0x67e <vfprintf+0xb4>
 66e:	8e 32       	cpi	r24, 0x2E	; 46
 670:	b9 f4       	brne	.+46     	; 0x6a0 <vfprintf+0xd6>
 672:	36 fc       	sbrc	r3, 6
 674:	81 c1       	rjmp	.+770    	; 0x978 <__stack+0x119>
 676:	23 2d       	mov	r18, r3
 678:	20 64       	ori	r18, 0x40	; 64
 67a:	32 2e       	mov	r3, r18
 67c:	19 c0       	rjmp	.+50     	; 0x6b0 <vfprintf+0xe6>
 67e:	36 fe       	sbrs	r3, 6
 680:	06 c0       	rjmp	.+12     	; 0x68e <vfprintf+0xc4>
 682:	8a e0       	ldi	r24, 0x0A	; 10
 684:	98 9e       	mul	r9, r24
 686:	20 0d       	add	r18, r0
 688:	11 24       	eor	r1, r1
 68a:	92 2e       	mov	r9, r18
 68c:	11 c0       	rjmp	.+34     	; 0x6b0 <vfprintf+0xe6>
 68e:	ea e0       	ldi	r30, 0x0A	; 10
 690:	2e 9e       	mul	r2, r30
 692:	20 0d       	add	r18, r0
 694:	11 24       	eor	r1, r1
 696:	22 2e       	mov	r2, r18
 698:	f3 2d       	mov	r31, r3
 69a:	f0 62       	ori	r31, 0x20	; 32
 69c:	3f 2e       	mov	r3, r31
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <vfprintf+0xe6>
 6a0:	8c 36       	cpi	r24, 0x6C	; 108
 6a2:	21 f4       	brne	.+8      	; 0x6ac <vfprintf+0xe2>
 6a4:	83 2d       	mov	r24, r3
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	38 2e       	mov	r3, r24
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <vfprintf+0xe6>
 6ac:	88 36       	cpi	r24, 0x68	; 104
 6ae:	41 f4       	brne	.+16     	; 0x6c0 <vfprintf+0xf6>
 6b0:	f7 01       	movw	r30, r14
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	7f 01       	movw	r14, r30
 6bc:	81 11       	cpse	r24, r1
 6be:	b3 cf       	rjmp	.-154    	; 0x626 <vfprintf+0x5c>
 6c0:	98 2f       	mov	r25, r24
 6c2:	9f 7d       	andi	r25, 0xDF	; 223
 6c4:	95 54       	subi	r25, 0x45	; 69
 6c6:	93 30       	cpi	r25, 0x03	; 3
 6c8:	28 f4       	brcc	.+10     	; 0x6d4 <vfprintf+0x10a>
 6ca:	0c 5f       	subi	r16, 0xFC	; 252
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	9f e3       	ldi	r25, 0x3F	; 63
 6d0:	99 83       	std	Y+1, r25	; 0x01
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <vfprintf+0x124>
 6d4:	83 36       	cpi	r24, 0x63	; 99
 6d6:	31 f0       	breq	.+12     	; 0x6e4 <vfprintf+0x11a>
 6d8:	83 37       	cpi	r24, 0x73	; 115
 6da:	71 f0       	breq	.+28     	; 0x6f8 <vfprintf+0x12e>
 6dc:	83 35       	cpi	r24, 0x53	; 83
 6de:	09 f0       	breq	.+2      	; 0x6e2 <vfprintf+0x118>
 6e0:	59 c0       	rjmp	.+178    	; 0x794 <vfprintf+0x1ca>
 6e2:	21 c0       	rjmp	.+66     	; 0x726 <vfprintf+0x15c>
 6e4:	f8 01       	movw	r30, r16
 6e6:	80 81       	ld	r24, Z
 6e8:	89 83       	std	Y+1, r24	; 0x01
 6ea:	0e 5f       	subi	r16, 0xFE	; 254
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	88 24       	eor	r8, r8
 6f0:	83 94       	inc	r8
 6f2:	91 2c       	mov	r9, r1
 6f4:	53 01       	movw	r10, r6
 6f6:	13 c0       	rjmp	.+38     	; 0x71e <vfprintf+0x154>
 6f8:	28 01       	movw	r4, r16
 6fa:	f2 e0       	ldi	r31, 0x02	; 2
 6fc:	4f 0e       	add	r4, r31
 6fe:	51 1c       	adc	r5, r1
 700:	f8 01       	movw	r30, r16
 702:	a0 80       	ld	r10, Z
 704:	b1 80       	ldd	r11, Z+1	; 0x01
 706:	36 fe       	sbrs	r3, 6
 708:	03 c0       	rjmp	.+6      	; 0x710 <vfprintf+0x146>
 70a:	69 2d       	mov	r22, r9
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x14a>
 710:	6f ef       	ldi	r22, 0xFF	; 255
 712:	7f ef       	ldi	r23, 0xFF	; 255
 714:	c5 01       	movw	r24, r10
 716:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <strnlen>
 71a:	4c 01       	movw	r8, r24
 71c:	82 01       	movw	r16, r4
 71e:	f3 2d       	mov	r31, r3
 720:	ff 77       	andi	r31, 0x7F	; 127
 722:	3f 2e       	mov	r3, r31
 724:	16 c0       	rjmp	.+44     	; 0x752 <vfprintf+0x188>
 726:	28 01       	movw	r4, r16
 728:	22 e0       	ldi	r18, 0x02	; 2
 72a:	42 0e       	add	r4, r18
 72c:	51 1c       	adc	r5, r1
 72e:	f8 01       	movw	r30, r16
 730:	a0 80       	ld	r10, Z
 732:	b1 80       	ldd	r11, Z+1	; 0x01
 734:	36 fe       	sbrs	r3, 6
 736:	03 c0       	rjmp	.+6      	; 0x73e <vfprintf+0x174>
 738:	69 2d       	mov	r22, r9
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x178>
 73e:	6f ef       	ldi	r22, 0xFF	; 255
 740:	7f ef       	ldi	r23, 0xFF	; 255
 742:	c5 01       	movw	r24, r10
 744:	0e 94 c6 04 	call	0x98c	; 0x98c <strnlen_P>
 748:	4c 01       	movw	r8, r24
 74a:	f3 2d       	mov	r31, r3
 74c:	f0 68       	ori	r31, 0x80	; 128
 74e:	3f 2e       	mov	r3, r31
 750:	82 01       	movw	r16, r4
 752:	33 fc       	sbrc	r3, 3
 754:	1b c0       	rjmp	.+54     	; 0x78c <vfprintf+0x1c2>
 756:	82 2d       	mov	r24, r2
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	88 16       	cp	r8, r24
 75c:	99 06       	cpc	r9, r25
 75e:	b0 f4       	brcc	.+44     	; 0x78c <vfprintf+0x1c2>
 760:	b6 01       	movw	r22, r12
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 76a:	2a 94       	dec	r2
 76c:	f4 cf       	rjmp	.-24     	; 0x756 <vfprintf+0x18c>
 76e:	f5 01       	movw	r30, r10
 770:	37 fc       	sbrc	r3, 7
 772:	85 91       	lpm	r24, Z+
 774:	37 fe       	sbrs	r3, 7
 776:	81 91       	ld	r24, Z+
 778:	5f 01       	movw	r10, r30
 77a:	b6 01       	movw	r22, r12
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 782:	21 10       	cpse	r2, r1
 784:	2a 94       	dec	r2
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	82 1a       	sub	r8, r18
 78a:	91 08       	sbc	r9, r1
 78c:	81 14       	cp	r8, r1
 78e:	91 04       	cpc	r9, r1
 790:	71 f7       	brne	.-36     	; 0x76e <vfprintf+0x1a4>
 792:	e8 c0       	rjmp	.+464    	; 0x964 <__stack+0x105>
 794:	84 36       	cpi	r24, 0x64	; 100
 796:	11 f0       	breq	.+4      	; 0x79c <vfprintf+0x1d2>
 798:	89 36       	cpi	r24, 0x69	; 105
 79a:	41 f5       	brne	.+80     	; 0x7ec <vfprintf+0x222>
 79c:	f8 01       	movw	r30, r16
 79e:	37 fe       	sbrs	r3, 7
 7a0:	07 c0       	rjmp	.+14     	; 0x7b0 <vfprintf+0x1e6>
 7a2:	60 81       	ld	r22, Z
 7a4:	71 81       	ldd	r23, Z+1	; 0x01
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	0c 5f       	subi	r16, 0xFC	; 252
 7ac:	1f 4f       	sbci	r17, 0xFF	; 255
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <vfprintf+0x1f6>
 7b0:	60 81       	ld	r22, Z
 7b2:	71 81       	ldd	r23, Z+1	; 0x01
 7b4:	07 2e       	mov	r0, r23
 7b6:	00 0c       	add	r0, r0
 7b8:	88 0b       	sbc	r24, r24
 7ba:	99 0b       	sbc	r25, r25
 7bc:	0e 5f       	subi	r16, 0xFE	; 254
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	f3 2d       	mov	r31, r3
 7c2:	ff 76       	andi	r31, 0x6F	; 111
 7c4:	3f 2e       	mov	r3, r31
 7c6:	97 ff       	sbrs	r25, 7
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x212>
 7ca:	90 95       	com	r25
 7cc:	80 95       	com	r24
 7ce:	70 95       	com	r23
 7d0:	61 95       	neg	r22
 7d2:	7f 4f       	sbci	r23, 0xFF	; 255
 7d4:	8f 4f       	sbci	r24, 0xFF	; 255
 7d6:	9f 4f       	sbci	r25, 0xFF	; 255
 7d8:	f0 68       	ori	r31, 0x80	; 128
 7da:	3f 2e       	mov	r3, r31
 7dc:	2a e0       	ldi	r18, 0x0A	; 10
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	a3 01       	movw	r20, r6
 7e2:	0e 94 18 05 	call	0xa30	; 0xa30 <__ultoa_invert>
 7e6:	88 2e       	mov	r8, r24
 7e8:	86 18       	sub	r8, r6
 7ea:	45 c0       	rjmp	.+138    	; 0x876 <__stack+0x17>
 7ec:	85 37       	cpi	r24, 0x75	; 117
 7ee:	31 f4       	brne	.+12     	; 0x7fc <vfprintf+0x232>
 7f0:	23 2d       	mov	r18, r3
 7f2:	2f 7e       	andi	r18, 0xEF	; 239
 7f4:	b2 2e       	mov	r11, r18
 7f6:	2a e0       	ldi	r18, 0x0A	; 10
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	25 c0       	rjmp	.+74     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7fc:	93 2d       	mov	r25, r3
 7fe:	99 7f       	andi	r25, 0xF9	; 249
 800:	b9 2e       	mov	r11, r25
 802:	8f 36       	cpi	r24, 0x6F	; 111
 804:	c1 f0       	breq	.+48     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 806:	18 f4       	brcc	.+6      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 808:	88 35       	cpi	r24, 0x58	; 88
 80a:	79 f0       	breq	.+30     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80c:	b5 c0       	rjmp	.+362    	; 0x978 <__stack+0x119>
 80e:	80 37       	cpi	r24, 0x70	; 112
 810:	19 f0       	breq	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	88 37       	cpi	r24, 0x78	; 120
 814:	21 f0       	breq	.+8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 816:	b0 c0       	rjmp	.+352    	; 0x978 <__stack+0x119>
 818:	e9 2f       	mov	r30, r25
 81a:	e0 61       	ori	r30, 0x10	; 16
 81c:	be 2e       	mov	r11, r30
 81e:	b4 fe       	sbrs	r11, 4
 820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 822:	fb 2d       	mov	r31, r11
 824:	f4 60       	ori	r31, 0x04	; 4
 826:	bf 2e       	mov	r11, r31
 828:	09 c0       	rjmp	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 82a:	34 fe       	sbrs	r3, 4
 82c:	0a c0       	rjmp	.+20     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 82e:	29 2f       	mov	r18, r25
 830:	26 60       	ori	r18, 0x06	; 6
 832:	b2 2e       	mov	r11, r18
 834:	06 c0       	rjmp	.+12     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 836:	28 e0       	ldi	r18, 0x08	; 8
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83c:	20 e1       	ldi	r18, 0x10	; 16
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	20 e1       	ldi	r18, 0x10	; 16
 844:	32 e0       	ldi	r19, 0x02	; 2
 846:	f8 01       	movw	r30, r16
 848:	b7 fe       	sbrs	r11, 7
 84a:	07 c0       	rjmp	.+14     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84c:	60 81       	ld	r22, Z
 84e:	71 81       	ldd	r23, Z+1	; 0x01
 850:	82 81       	ldd	r24, Z+2	; 0x02
 852:	93 81       	ldd	r25, Z+3	; 0x03
 854:	0c 5f       	subi	r16, 0xFC	; 252
 856:	1f 4f       	sbci	r17, 0xFF	; 255
 858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x7>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 5f       	subi	r16, 0xFE	; 254
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	a3 01       	movw	r20, r6
 868:	0e 94 18 05 	call	0xa30	; 0xa30 <__ultoa_invert>
 86c:	88 2e       	mov	r8, r24
 86e:	86 18       	sub	r8, r6
 870:	fb 2d       	mov	r31, r11
 872:	ff 77       	andi	r31, 0x7F	; 127
 874:	3f 2e       	mov	r3, r31
 876:	36 fe       	sbrs	r3, 6
 878:	0d c0       	rjmp	.+26     	; 0x894 <__stack+0x35>
 87a:	23 2d       	mov	r18, r3
 87c:	2e 7f       	andi	r18, 0xFE	; 254
 87e:	a2 2e       	mov	r10, r18
 880:	89 14       	cp	r8, r9
 882:	58 f4       	brcc	.+22     	; 0x89a <__stack+0x3b>
 884:	34 fe       	sbrs	r3, 4
 886:	0b c0       	rjmp	.+22     	; 0x89e <__stack+0x3f>
 888:	32 fc       	sbrc	r3, 2
 88a:	09 c0       	rjmp	.+18     	; 0x89e <__stack+0x3f>
 88c:	83 2d       	mov	r24, r3
 88e:	8e 7e       	andi	r24, 0xEE	; 238
 890:	a8 2e       	mov	r10, r24
 892:	05 c0       	rjmp	.+10     	; 0x89e <__stack+0x3f>
 894:	b8 2c       	mov	r11, r8
 896:	a3 2c       	mov	r10, r3
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <__stack+0x41>
 89a:	b8 2c       	mov	r11, r8
 89c:	01 c0       	rjmp	.+2      	; 0x8a0 <__stack+0x41>
 89e:	b9 2c       	mov	r11, r9
 8a0:	a4 fe       	sbrs	r10, 4
 8a2:	0f c0       	rjmp	.+30     	; 0x8c2 <__stack+0x63>
 8a4:	fe 01       	movw	r30, r28
 8a6:	e8 0d       	add	r30, r8
 8a8:	f1 1d       	adc	r31, r1
 8aa:	80 81       	ld	r24, Z
 8ac:	80 33       	cpi	r24, 0x30	; 48
 8ae:	21 f4       	brne	.+8      	; 0x8b8 <__stack+0x59>
 8b0:	9a 2d       	mov	r25, r10
 8b2:	99 7e       	andi	r25, 0xE9	; 233
 8b4:	a9 2e       	mov	r10, r25
 8b6:	09 c0       	rjmp	.+18     	; 0x8ca <__stack+0x6b>
 8b8:	a2 fe       	sbrs	r10, 2
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <__stack+0x69>
 8bc:	b3 94       	inc	r11
 8be:	b3 94       	inc	r11
 8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__stack+0x6b>
 8c2:	8a 2d       	mov	r24, r10
 8c4:	86 78       	andi	r24, 0x86	; 134
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	b3 94       	inc	r11
 8ca:	a3 fc       	sbrc	r10, 3
 8cc:	11 c0       	rjmp	.+34     	; 0x8f0 <__stack+0x91>
 8ce:	a0 fe       	sbrs	r10, 0
 8d0:	06 c0       	rjmp	.+12     	; 0x8de <__stack+0x7f>
 8d2:	b2 14       	cp	r11, r2
 8d4:	88 f4       	brcc	.+34     	; 0x8f8 <__stack+0x99>
 8d6:	28 0c       	add	r2, r8
 8d8:	92 2c       	mov	r9, r2
 8da:	9b 18       	sub	r9, r11
 8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
 8de:	b2 14       	cp	r11, r2
 8e0:	60 f4       	brcc	.+24     	; 0x8fa <__stack+0x9b>
 8e2:	b6 01       	movw	r22, r12
 8e4:	80 e2       	ldi	r24, 0x20	; 32
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 8ec:	b3 94       	inc	r11
 8ee:	f7 cf       	rjmp	.-18     	; 0x8de <__stack+0x7f>
 8f0:	b2 14       	cp	r11, r2
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <__stack+0x9b>
 8f4:	2b 18       	sub	r2, r11
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
 8f8:	98 2c       	mov	r9, r8
 8fa:	21 2c       	mov	r2, r1
 8fc:	a4 fe       	sbrs	r10, 4
 8fe:	10 c0       	rjmp	.+32     	; 0x920 <__stack+0xc1>
 900:	b6 01       	movw	r22, r12
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 90a:	a2 fe       	sbrs	r10, 2
 90c:	17 c0       	rjmp	.+46     	; 0x93c <__stack+0xdd>
 90e:	a1 fc       	sbrc	r10, 1
 910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0xb9>
 912:	88 e7       	ldi	r24, 0x78	; 120
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
 918:	88 e5       	ldi	r24, 0x58	; 88
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	b6 01       	movw	r22, r12
 91e:	0c c0       	rjmp	.+24     	; 0x938 <__stack+0xd9>
 920:	8a 2d       	mov	r24, r10
 922:	86 78       	andi	r24, 0x86	; 134
 924:	59 f0       	breq	.+22     	; 0x93c <__stack+0xdd>
 926:	a1 fe       	sbrs	r10, 1
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
 92a:	8b e2       	ldi	r24, 0x2B	; 43
 92c:	01 c0       	rjmp	.+2      	; 0x930 <__stack+0xd1>
 92e:	80 e2       	ldi	r24, 0x20	; 32
 930:	a7 fc       	sbrc	r10, 7
 932:	8d e2       	ldi	r24, 0x2D	; 45
 934:	b6 01       	movw	r22, r12
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 93c:	89 14       	cp	r8, r9
 93e:	38 f4       	brcc	.+14     	; 0x94e <__stack+0xef>
 940:	b6 01       	movw	r22, r12
 942:	80 e3       	ldi	r24, 0x30	; 48
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 94a:	9a 94       	dec	r9
 94c:	f7 cf       	rjmp	.-18     	; 0x93c <__stack+0xdd>
 94e:	8a 94       	dec	r8
 950:	f3 01       	movw	r30, r6
 952:	e8 0d       	add	r30, r8
 954:	f1 1d       	adc	r31, r1
 956:	80 81       	ld	r24, Z
 958:	b6 01       	movw	r22, r12
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 960:	81 10       	cpse	r8, r1
 962:	f5 cf       	rjmp	.-22     	; 0x94e <__stack+0xef>
 964:	22 20       	and	r2, r2
 966:	09 f4       	brne	.+2      	; 0x96a <__stack+0x10b>
 968:	42 ce       	rjmp	.-892    	; 0x5ee <vfprintf+0x24>
 96a:	b6 01       	movw	r22, r12
 96c:	80 e2       	ldi	r24, 0x20	; 32
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <fputc>
 974:	2a 94       	dec	r2
 976:	f6 cf       	rjmp	.-20     	; 0x964 <__stack+0x105>
 978:	f6 01       	movw	r30, r12
 97a:	86 81       	ldd	r24, Z+6	; 0x06
 97c:	97 81       	ldd	r25, Z+7	; 0x07
 97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x125>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	2b 96       	adiw	r28, 0x0b	; 11
 986:	e2 e1       	ldi	r30, 0x12	; 18
 988:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__epilogue_restores__>

0000098c <strnlen_P>:
 98c:	fc 01       	movw	r30, r24
 98e:	05 90       	lpm	r0, Z+
 990:	61 50       	subi	r22, 0x01	; 1
 992:	70 40       	sbci	r23, 0x00	; 0
 994:	01 10       	cpse	r0, r1
 996:	d8 f7       	brcc	.-10     	; 0x98e <strnlen_P+0x2>
 998:	80 95       	com	r24
 99a:	90 95       	com	r25
 99c:	8e 0f       	add	r24, r30
 99e:	9f 1f       	adc	r25, r31
 9a0:	08 95       	ret

000009a2 <strnlen>:
 9a2:	fc 01       	movw	r30, r24
 9a4:	61 50       	subi	r22, 0x01	; 1
 9a6:	70 40       	sbci	r23, 0x00	; 0
 9a8:	01 90       	ld	r0, Z+
 9aa:	01 10       	cpse	r0, r1
 9ac:	d8 f7       	brcc	.-10     	; 0x9a4 <strnlen+0x2>
 9ae:	80 95       	com	r24
 9b0:	90 95       	com	r25
 9b2:	8e 0f       	add	r24, r30
 9b4:	9f 1f       	adc	r25, r31
 9b6:	08 95       	ret

000009b8 <fputc>:
 9b8:	0f 93       	push	r16
 9ba:	1f 93       	push	r17
 9bc:	cf 93       	push	r28
 9be:	df 93       	push	r29
 9c0:	fb 01       	movw	r30, r22
 9c2:	23 81       	ldd	r18, Z+3	; 0x03
 9c4:	21 fd       	sbrc	r18, 1
 9c6:	03 c0       	rjmp	.+6      	; 0x9ce <fputc+0x16>
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	9f ef       	ldi	r25, 0xFF	; 255
 9cc:	2c c0       	rjmp	.+88     	; 0xa26 <fputc+0x6e>
 9ce:	22 ff       	sbrs	r18, 2
 9d0:	16 c0       	rjmp	.+44     	; 0x9fe <fputc+0x46>
 9d2:	46 81       	ldd	r20, Z+6	; 0x06
 9d4:	57 81       	ldd	r21, Z+7	; 0x07
 9d6:	24 81       	ldd	r18, Z+4	; 0x04
 9d8:	35 81       	ldd	r19, Z+5	; 0x05
 9da:	42 17       	cp	r20, r18
 9dc:	53 07       	cpc	r21, r19
 9de:	44 f4       	brge	.+16     	; 0x9f0 <fputc+0x38>
 9e0:	a0 81       	ld	r26, Z
 9e2:	b1 81       	ldd	r27, Z+1	; 0x01
 9e4:	9d 01       	movw	r18, r26
 9e6:	2f 5f       	subi	r18, 0xFF	; 255
 9e8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ea:	31 83       	std	Z+1, r19	; 0x01
 9ec:	20 83       	st	Z, r18
 9ee:	8c 93       	st	X, r24
 9f0:	26 81       	ldd	r18, Z+6	; 0x06
 9f2:	37 81       	ldd	r19, Z+7	; 0x07
 9f4:	2f 5f       	subi	r18, 0xFF	; 255
 9f6:	3f 4f       	sbci	r19, 0xFF	; 255
 9f8:	37 83       	std	Z+7, r19	; 0x07
 9fa:	26 83       	std	Z+6, r18	; 0x06
 9fc:	14 c0       	rjmp	.+40     	; 0xa26 <fputc+0x6e>
 9fe:	8b 01       	movw	r16, r22
 a00:	ec 01       	movw	r28, r24
 a02:	fb 01       	movw	r30, r22
 a04:	00 84       	ldd	r0, Z+8	; 0x08
 a06:	f1 85       	ldd	r31, Z+9	; 0x09
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 95       	icall
 a0c:	89 2b       	or	r24, r25
 a0e:	e1 f6       	brne	.-72     	; 0x9c8 <fputc+0x10>
 a10:	d8 01       	movw	r26, r16
 a12:	16 96       	adiw	r26, 0x06	; 6
 a14:	8d 91       	ld	r24, X+
 a16:	9c 91       	ld	r25, X
 a18:	17 97       	sbiw	r26, 0x07	; 7
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	17 96       	adiw	r26, 0x07	; 7
 a1e:	9c 93       	st	X, r25
 a20:	8e 93       	st	-X, r24
 a22:	16 97       	sbiw	r26, 0x06	; 6
 a24:	ce 01       	movw	r24, r28
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	1f 91       	pop	r17
 a2c:	0f 91       	pop	r16
 a2e:	08 95       	ret

00000a30 <__ultoa_invert>:
 a30:	fa 01       	movw	r30, r20
 a32:	aa 27       	eor	r26, r26
 a34:	28 30       	cpi	r18, 0x08	; 8
 a36:	51 f1       	breq	.+84     	; 0xa8c <__ultoa_invert+0x5c>
 a38:	20 31       	cpi	r18, 0x10	; 16
 a3a:	81 f1       	breq	.+96     	; 0xa9c <__ultoa_invert+0x6c>
 a3c:	e8 94       	clt
 a3e:	6f 93       	push	r22
 a40:	6e 7f       	andi	r22, 0xFE	; 254
 a42:	6e 5f       	subi	r22, 0xFE	; 254
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	af 4f       	sbci	r26, 0xFF	; 255
 a4c:	b1 e0       	ldi	r27, 0x01	; 1
 a4e:	3e d0       	rcall	.+124    	; 0xacc <__ultoa_invert+0x9c>
 a50:	b4 e0       	ldi	r27, 0x04	; 4
 a52:	3c d0       	rcall	.+120    	; 0xacc <__ultoa_invert+0x9c>
 a54:	67 0f       	add	r22, r23
 a56:	78 1f       	adc	r23, r24
 a58:	89 1f       	adc	r24, r25
 a5a:	9a 1f       	adc	r25, r26
 a5c:	a1 1d       	adc	r26, r1
 a5e:	68 0f       	add	r22, r24
 a60:	79 1f       	adc	r23, r25
 a62:	8a 1f       	adc	r24, r26
 a64:	91 1d       	adc	r25, r1
 a66:	a1 1d       	adc	r26, r1
 a68:	6a 0f       	add	r22, r26
 a6a:	71 1d       	adc	r23, r1
 a6c:	81 1d       	adc	r24, r1
 a6e:	91 1d       	adc	r25, r1
 a70:	a1 1d       	adc	r26, r1
 a72:	20 d0       	rcall	.+64     	; 0xab4 <__ultoa_invert+0x84>
 a74:	09 f4       	brne	.+2      	; 0xa78 <__ultoa_invert+0x48>
 a76:	68 94       	set
 a78:	3f 91       	pop	r19
 a7a:	2a e0       	ldi	r18, 0x0A	; 10
 a7c:	26 9f       	mul	r18, r22
 a7e:	11 24       	eor	r1, r1
 a80:	30 19       	sub	r19, r0
 a82:	30 5d       	subi	r19, 0xD0	; 208
 a84:	31 93       	st	Z+, r19
 a86:	de f6       	brtc	.-74     	; 0xa3e <__ultoa_invert+0xe>
 a88:	cf 01       	movw	r24, r30
 a8a:	08 95       	ret
 a8c:	46 2f       	mov	r20, r22
 a8e:	47 70       	andi	r20, 0x07	; 7
 a90:	40 5d       	subi	r20, 0xD0	; 208
 a92:	41 93       	st	Z+, r20
 a94:	b3 e0       	ldi	r27, 0x03	; 3
 a96:	0f d0       	rcall	.+30     	; 0xab6 <__ultoa_invert+0x86>
 a98:	c9 f7       	brne	.-14     	; 0xa8c <__ultoa_invert+0x5c>
 a9a:	f6 cf       	rjmp	.-20     	; 0xa88 <__ultoa_invert+0x58>
 a9c:	46 2f       	mov	r20, r22
 a9e:	4f 70       	andi	r20, 0x0F	; 15
 aa0:	40 5d       	subi	r20, 0xD0	; 208
 aa2:	4a 33       	cpi	r20, 0x3A	; 58
 aa4:	18 f0       	brcs	.+6      	; 0xaac <__ultoa_invert+0x7c>
 aa6:	49 5d       	subi	r20, 0xD9	; 217
 aa8:	31 fd       	sbrc	r19, 1
 aaa:	40 52       	subi	r20, 0x20	; 32
 aac:	41 93       	st	Z+, r20
 aae:	02 d0       	rcall	.+4      	; 0xab4 <__ultoa_invert+0x84>
 ab0:	a9 f7       	brne	.-22     	; 0xa9c <__ultoa_invert+0x6c>
 ab2:	ea cf       	rjmp	.-44     	; 0xa88 <__ultoa_invert+0x58>
 ab4:	b4 e0       	ldi	r27, 0x04	; 4
 ab6:	a6 95       	lsr	r26
 ab8:	97 95       	ror	r25
 aba:	87 95       	ror	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	ba 95       	dec	r27
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <__ultoa_invert+0x86>
 ac4:	00 97       	sbiw	r24, 0x00	; 0
 ac6:	61 05       	cpc	r22, r1
 ac8:	71 05       	cpc	r23, r1
 aca:	08 95       	ret
 acc:	9b 01       	movw	r18, r22
 ace:	ac 01       	movw	r20, r24
 ad0:	0a 2e       	mov	r0, r26
 ad2:	06 94       	lsr	r0
 ad4:	57 95       	ror	r21
 ad6:	47 95       	ror	r20
 ad8:	37 95       	ror	r19
 ada:	27 95       	ror	r18
 adc:	ba 95       	dec	r27
 ade:	c9 f7       	brne	.-14     	; 0xad2 <__ultoa_invert+0xa2>
 ae0:	62 0f       	add	r22, r18
 ae2:	73 1f       	adc	r23, r19
 ae4:	84 1f       	adc	r24, r20
 ae6:	95 1f       	adc	r25, r21
 ae8:	a0 1d       	adc	r26, r0
 aea:	08 95       	ret

00000aec <__prologue_saves__>:
 aec:	2f 92       	push	r2
 aee:	3f 92       	push	r3
 af0:	4f 92       	push	r4
 af2:	5f 92       	push	r5
 af4:	6f 92       	push	r6
 af6:	7f 92       	push	r7
 af8:	8f 92       	push	r8
 afa:	9f 92       	push	r9
 afc:	af 92       	push	r10
 afe:	bf 92       	push	r11
 b00:	cf 92       	push	r12
 b02:	df 92       	push	r13
 b04:	ef 92       	push	r14
 b06:	ff 92       	push	r15
 b08:	0f 93       	push	r16
 b0a:	1f 93       	push	r17
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	ca 1b       	sub	r28, r26
 b16:	db 0b       	sbc	r29, r27
 b18:	0f b6       	in	r0, 0x3f	; 63
 b1a:	f8 94       	cli
 b1c:	de bf       	out	0x3e, r29	; 62
 b1e:	0f be       	out	0x3f, r0	; 63
 b20:	cd bf       	out	0x3d, r28	; 61
 b22:	09 94       	ijmp

00000b24 <__epilogue_restores__>:
 b24:	2a 88       	ldd	r2, Y+18	; 0x12
 b26:	39 88       	ldd	r3, Y+17	; 0x11
 b28:	48 88       	ldd	r4, Y+16	; 0x10
 b2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b30:	8c 84       	ldd	r8, Y+12	; 0x0c
 b32:	9b 84       	ldd	r9, Y+11	; 0x0b
 b34:	aa 84       	ldd	r10, Y+10	; 0x0a
 b36:	b9 84       	ldd	r11, Y+9	; 0x09
 b38:	c8 84       	ldd	r12, Y+8	; 0x08
 b3a:	df 80       	ldd	r13, Y+7	; 0x07
 b3c:	ee 80       	ldd	r14, Y+6	; 0x06
 b3e:	fd 80       	ldd	r15, Y+5	; 0x05
 b40:	0c 81       	ldd	r16, Y+4	; 0x04
 b42:	1b 81       	ldd	r17, Y+3	; 0x03
 b44:	aa 81       	ldd	r26, Y+2	; 0x02
 b46:	b9 81       	ldd	r27, Y+1	; 0x01
 b48:	ce 0f       	add	r28, r30
 b4a:	d1 1d       	adc	r29, r1
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
 b56:	ed 01       	movw	r28, r26
 b58:	08 95       	ret

00000b5a <_exit>:
 b5a:	f8 94       	cli

00000b5c <__stop_program>:
 b5c:	ff cf       	rjmp	.-2      	; 0xb5c <__stop_program>
